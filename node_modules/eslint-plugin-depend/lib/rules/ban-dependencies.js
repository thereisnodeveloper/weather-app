"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const rule_meta_js_1 = require("../util/rule-meta.js");
const module_replacements_1 = require("module-replacements");
const imports_js_1 = require("../util/imports.js");
const availablePresets = {
    microutilities: module_replacements_1.microUtilsReplacements.moduleReplacements,
    native: module_replacements_1.nativeReplacements.moduleReplacements,
    preferred: module_replacements_1.preferredReplacements.moduleReplacements
};
const defaultPresets = ['microutilities', 'native', 'preferred'];
exports.rule = {
    meta: {
        type: 'suggestion',
        docs: {
            description: 'Bans a list of dependencies from being used',
            url: (0, rule_meta_js_1.getDocsUrl)('ban-dependencies')
        },
        schema: [
            {
                type: 'object',
                properties: {
                    presets: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    modules: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    allowed: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                },
                additionalProperties: false
            }
        ],
        messages: {
            nativeReplacement: '"{{name}}" should be replaced with native functionality. ' +
                'You can instead use {{replacement}}. Read more here: {{url}}',
            documentedReplacement: '"{{name}}" should be replaced with an alternative package. ' +
                'Read more here: {{url}}',
            simpleReplacement: '"{{name}}" should be replaced with inline/local logic.' +
                '{{replacement}}',
            noneReplacement: '"{{name}}" is a banned dependency. An alternative should be used.'
        }
    },
    create: (context) => {
        const options = context.options[0];
        const replacements = [];
        const presets = options?.presets ?? defaultPresets;
        const modules = options?.modules;
        const allowed = new Set(options?.allowed ?? []);
        for (const preset of presets) {
            const presetReplacements = availablePresets[preset];
            if (presetReplacements) {
                for (const rep of presetReplacements) {
                    if (!allowed.has(rep.moduleName)) {
                        replacements.push(rep);
                    }
                }
            }
        }
        if (modules) {
            for (const mod of modules) {
                if (!allowed.has(mod)) {
                    replacements.push({
                        type: 'none',
                        moduleName: mod
                    });
                }
            }
        }
        return {
            ...(0, imports_js_1.createReplacementListener)(context, replacements)
        };
    }
};

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodeConstraint = getNodeConstraint;
exports.getClosestPackage = getClosestPackage;
exports.closestPackageSatisfiesNodeVersion = closestPackageSatisfiesNodeVersion;
const fd_package_json_1 = require("fd-package-json");
const satisfies_js_1 = __importDefault(require("semver/functions/satisfies.js"));
const ltr_js_1 = __importDefault(require("semver/ranges/ltr.js"));
/**
 * Gets the node engine constraint from `package.json` if possible
 * @param {Record} packageJson Package to process
 * @return {string | null}
 */
function getNodeConstraint(packageJson) {
    const engines = packageJson.engines;
    if (typeof engines !== 'object' || engines === null || !('node' in engines)) {
        return null;
    }
    const nodeVersion = engines.node;
    if (typeof nodeVersion !== 'string') {
        return null;
    }
    return nodeVersion;
}
const packageCache = new WeakMap();
/**
 * Gets the closest `package.json` for a context
 * @param {Rule.RuleContext} context ESLint context
 * @return {Record | null}
 */
function getClosestPackage(context) {
    const cachedPackageJson = packageCache.get(context);
    if (cachedPackageJson !== undefined) {
        return cachedPackageJson;
    }
    const packageJson = (0, fd_package_json_1.findPackageSync)(context.cwd);
    packageCache.set(context, packageJson);
    return packageJson;
}
/**
 * Tests whether the closest `package.json` satisfies the specified
 * node version.
 * This will be true if the package's `engines` field has a version range
 * which this version satisfies, or no field at all.
 * @param {Rule.RuleContext} context ESLint context
 * @param {string} version Version to test
 * @return {boolean}
 */
function closestPackageSatisfiesNodeVersion(context, version) {
    const packageJson = getClosestPackage(context);
    if (!packageJson) {
        return true;
    }
    const nodeConstraint = getNodeConstraint(packageJson);
    if (!nodeConstraint) {
        return true;
    }
    return ((0, ltr_js_1.default)(version, nodeConstraint) ||
        (0, satisfies_js_1.default)(version, nodeConstraint));
}

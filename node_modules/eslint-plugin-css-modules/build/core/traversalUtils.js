"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRegularClassesMap = exports.getParentSelectorClassesMap = exports.getICSSExportPropsMap = exports.getExtendClassesMap = exports.getComposesClassesMap = exports.eliminateGlobals = void 0;
var _fp = _interopRequireDefault(require("lodash/fp"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/* eslint-disable no-param-reassign */
var getICSSExportPropsMap = exports.getICSSExportPropsMap = function getICSSExportPropsMap(ast) {
  var ruleSets = [];
  ast.traverseByType('ruleset', function (node) {
    return ruleSets.push(node);
  });
  return _fp["default"].compose(_fp["default"].reduce(function (result, key) {
    var prop = _fp["default"].compose(_fp["default"].nth(0), _fp["default"].map('content'))(key);
    result[prop] = prop; // e.g. { myProp: 'myProp' }
    return result;
  }, {}), _fp["default"].map('content'), _fp["default"].filter({
    type: 'property'
  }), _fp["default"].flatMap('content'), _fp["default"].filter({
    type: 'declaration'
  }), _fp["default"].flatMap('content'), _fp["default"].filter({
    type: 'block'
  }), _fp["default"].flatMap('content'), _fp["default"].filter({
    content: [{
      type: 'selector',
      content: [{
        type: 'pseudoClass',
        content: [{
          type: 'ident',
          content: 'export'
        }]
      }]
    }]
  }))(ruleSets);
};
var getRegularClassesMap = exports.getRegularClassesMap = function getRegularClassesMap(ast) {
  var ruleSets = [];
  ast.traverseByType('ruleset', function (node) {
    return ruleSets.push(node);
  });
  return _fp["default"].compose(_fp["default"].reduce(function (result, key) {
    result[key] = false; // classes haven't been used
    return result;
  }, {}), _fp["default"].map('content'), _fp["default"].filter({
    type: 'ident'
  }), _fp["default"].flatMap('content'), _fp["default"].filter({
    type: 'class'
  }), _fp["default"].flatMap('content'), _fp["default"].filter({
    type: 'selector'
  }), _fp["default"].flatMap('content'))(ruleSets);
};
var getComposesClassesMap = exports.getComposesClassesMap = function getComposesClassesMap(ast) {
  var declarations = [];
  ast.traverseByType('declaration', function (node) {
    return declarations.push(node);
  });
  return _fp["default"].compose(_fp["default"].reduce(function (result, key) {
    result[key] = true; // mark composed classes as true
    return result;
  }, {}), _fp["default"].flatMap(_fp["default"].compose(_fp["default"].map(_fp["default"].get('content')), _fp["default"].filter({
    type: 'ident'
  }), _fp["default"].get('content'), _fp["default"].find({
    type: 'value'
  }), _fp["default"].get('content'))),
  /*
     reject classes composing from other files
     eg.
     .foo {
     composes: .bar from './otherFile';
     }
   */
  _fp["default"].reject(_fp["default"].compose(_fp["default"].find({
    type: 'ident',
    content: 'from'
  }), _fp["default"].get('content'), _fp["default"].find({
    type: 'value'
  }), _fp["default"].get('content'))), _fp["default"].filter(_fp["default"].compose(_fp["default"].find({
    type: 'ident',
    content: 'composes'
  }), _fp["default"].get('content'), _fp["default"].find({
    type: 'property'
  }), _fp["default"].get('content'))))(declarations);
};
var getExtendClassesMap = exports.getExtendClassesMap = function getExtendClassesMap(ast) {
  var extendNodes = [];
  ast.traverseByType('extend', function (node) {
    return extendNodes.push(node);
  });
  return _fp["default"].compose(_fp["default"].reduce(function (result, key) {
    result[key] = true; // mark extend classes as true
    return result;
  }, {}), _fp["default"].map(_fp["default"].compose(_fp["default"].get('content'), _fp["default"].find({
    type: 'ident'
  }), _fp["default"].get('content'), _fp["default"].find({
    type: 'class'
  }), _fp["default"].get('content'), _fp["default"].find({
    type: 'selector'
  }), _fp["default"].get('content'))))(extendNodes);
};

/**
 * Resolves parent selectors to their full class names.
 *
 * E.g. `.foo { &_bar {color: blue } }` to `.foo_bar`.
 */
var getParentSelectorClassesMap = exports.getParentSelectorClassesMap = function getParentSelectorClassesMap(ast) {
  var classesMap = {};

  // Recursively traverses down the tree looking for parent selector
  // extensions. Recursion is necessary as these selectors can be nested.
  var getExtensions = function getExtensions(nodeContent) {
    var blockContent = _fp["default"].compose(_fp["default"].flatMap('content'), _fp["default"].filter({
      type: 'block'
    }))(nodeContent);
    var rulesetsContent = _fp["default"].flatMap('content', _fp["default"].concat(
    // `ruleset` children
    _fp["default"].filter({
      type: 'ruleset'
    }, blockContent),
    // `ruleset` descendants nested in `include` nodes
    _fp["default"].compose(_fp["default"].filter({
      type: 'ruleset'
    }), _fp["default"].flatMap('content'), _fp["default"].filter({
      type: 'block'
    }), _fp["default"].flatMap('content'), _fp["default"].filter({
      type: 'include'
    }))(blockContent)));
    var extensions = _fp["default"].compose(_fp["default"].map('content'), _fp["default"].filter({
      type: 'ident'
    }), _fp["default"].flatMap('content'), _fp["default"].filter({
      type: 'parentSelectorExtension'
    }), _fp["default"].flatMap('content'), _fp["default"].filter({
      type: 'selector'
    }))(rulesetsContent);
    if (!extensions.length) return [];
    var nestedExtensions = getExtensions(rulesetsContent);
    var result = extensions;
    if (nestedExtensions.length) {
      nestedExtensions.forEach(function (nestedExt) {
        extensions.forEach(function (ext) {
          result.push(ext + nestedExt);
        });
      });
    }
    return result;
  };
  ast.traverseByType('ruleset', function (node) {
    var classNames = _fp["default"].compose(_fp["default"].map('content'), _fp["default"].filter({
      type: 'ident'
    }), _fp["default"].flatMap('content'), _fp["default"].filter({
      type: 'class'
    }), _fp["default"].flatMap('content'), _fp["default"].filter({
      type: 'selector'
    }))(node.content);
    if (!classNames.length) return;
    var extensions = getExtensions(node.content);
    if (!extensions.length) return;
    classNames.forEach(function (className) {
      extensions.forEach(function (ext) {
        classesMap[className + ext] = false;
      });

      // Ignore the base class if it only exists for nesting parent selectors
      var hasDeclarations = _fp["default"].compose(_fp["default"].filter({
        type: 'declaration'
      }), _fp["default"].flatMap('content'), _fp["default"].filter({
        type: 'block'
      }))(node.content).length > 0;
      if (!hasDeclarations) classesMap[className] = true;
    });
  });
  return classesMap;
};

/**
 * Mutates the AST by removing `:global` instances.
 *
 * For the AST structure:
 * @see https://github.com/css/gonzales/blob/master/doc/AST.CSSP.en.md
 */
var eliminateGlobals = exports.eliminateGlobals = function eliminateGlobals(ast) {
  // Remove all :global/:global(...) in selectors
  ast.traverseByType('selector', function (selectorNode) {
    var selectorContent = selectorNode.content;
    var hasGlobalWithNoArgs = false;
    var i = 0;
    var currNode = selectorContent[i];
    while (currNode) {
      if (currNode.is('pseudoClass')) {
        // Remove all :global/:global(...) and trailing space
        var identifierNode = currNode.content[0];
        if (identifierNode && identifierNode.content === 'global') {
          if (currNode.content.length === 1) hasGlobalWithNoArgs = true;
          selectorNode.removeChild(i);
          if (selectorContent[i] && selectorContent[i].is('space')) {
            selectorNode.removeChild(i);
          }
        } else {
          i++;
        }
      } else if (currNode.is('class') && hasGlobalWithNoArgs) {
        // Remove all class after :global and their trailing space
        selectorNode.removeChild(i);
        if (selectorContent[i] && selectorContent[i].is('space')) {
          selectorNode.removeChild(i);
        }
      } else {
        i++;
      }
      currNode = selectorContent[i];
    }
  });

  // Remove all ruleset with no selectors
  ast.traverseByType('ruleset', function (node, index, parent) {
    var rulesetContent = node.content;

    // Remove empty selectors and trailing deliminator and space
    var i = 0;
    var currNode = rulesetContent[i];
    while (currNode) {
      if (currNode.is('selector') && currNode.content.length === 0) {
        node.removeChild(i);
        if (rulesetContent[i].is('delimiter')) node.removeChild(i);
        if (rulesetContent[i].is('space')) node.removeChild(i);
      } else {
        i++;
      }
      currNode = rulesetContent[i];
    }

    // Remove the ruleset if no selectors
    if (rulesetContent.filter(function (node) {
      return node.is('selector');
    }).length === 0) {
      parent.removeChild(index);
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
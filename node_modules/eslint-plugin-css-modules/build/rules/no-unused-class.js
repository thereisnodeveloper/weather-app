"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _fp = _interopRequireDefault(require("lodash/fp"));
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _core = require("../core");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var _default = exports["default"] = {
  meta: {
    docs: {
      description: 'Checks that you are using all css/scss/less classes',
      recommended: true
    },
    schema: [{
      type: 'object',
      properties: {
        camelCase: {
          "enum": [true, 'dashes', 'only', 'dashes-only']
        },
        markAsUsed: {
          type: 'array'
        }
      }
    }]
  },
  create: function create(context) {
    var markAsUsed = _lodash["default"].get(context, 'options[0].markAsUsed');
    var camelCase = _lodash["default"].get(context, 'options[0].camelCase');

    /*
       maps variable name to property Object
       map = {
         [variableName]: {
           classes: { foo: false, 'foo-bar': false },
           classesMap: { foo: 'foo', fooBar: 'foo-bar', 'foo-bar': 'foo-bar' },
           node: {...}
         }
       }
        example:
       import s from './foo.scss';
       s is variable name
        property Object has two keys
       1. classes: an object with className as key and a boolean as value. The boolean is marked if it is used in file
       2. classesMap: an object with propertyName as key and its className as value
       3. node: node that correspond to s (see example above)
     */
    var map = {};
    return {
      ImportDeclaration: function ImportDeclaration(node) {
        var styleImportNodeData = (0, _core.getStyleImportNodeData)(node);
        if (!styleImportNodeData) {
          return;
        }
        var importName = styleImportNodeData.importName,
          styleFilePath = styleImportNodeData.styleFilePath,
          importNode = styleImportNodeData.importNode;
        var styleFileAbsolutePath = (0, _core.getFilePath)(context, styleFilePath);
        var classes = {};
        var classesMap = {};
        if ((0, _core.fileExists)(styleFileAbsolutePath)) {
          // this will be used to mark s.foo as used in MemberExpression
          var ast = (0, _core.getAST)(styleFileAbsolutePath);
          classes = ast && (0, _core.getStyleClasses)(ast);
          classesMap = classes && (0, _core.getClassesMap)(classes, camelCase);
        }
        _lodash["default"].set(map, "".concat(importName, ".classes"), classes);
        _lodash["default"].set(map, "".concat(importName, ".classesMap"), classesMap);

        // save node for reporting unused styles
        _lodash["default"].set(map, "".concat(importName, ".node"), importNode);

        // save file path for reporting unused styles
        _lodash["default"].set(map, "".concat(importName, ".filePath"), styleFilePath);
      },
      MemberExpression: function MemberExpression(node) {
        /*
           Check if property exists in css/scss file as class
         */

        var objectName = node.object.name;
        var propertyName = (0, _core.getPropertyName)(node, camelCase);
        if (!propertyName) {
          return;
        }
        var className = _lodash["default"].get(map, "".concat(objectName, ".classesMap.").concat(propertyName));
        if (className == null) {
          return;
        }

        // mark this property has used
        _lodash["default"].set(map, "".concat(objectName, ".classes.").concat(className), true);
      },
      'Program:exit': function ProgramExit() {
        /*
           Check if all classes defined in css/scss file are used
         */

        /*
           we are looping over each import style node in program
           example:
           ```
             import s from './foo.css';
             import x from './bar.scss';
           ```
           then the loop will be run 2 times
         */
        _lodash["default"].forIn(map, function (o) {
          var classes = o.classes,
            node = o.node,
            filePath = o.filePath;

          /*
             if option is passed to mark a class as used, example:
             eslint css-modules/no-unused-class: [2, { markAsUsed: ['container'] }]
           */
          _lodash["default"].forEach(markAsUsed, function (usedClass) {
            classes[usedClass] = true;
          });

          // classNames not marked as true are unused
          var unusedClasses = _fp["default"].compose(_fp["default"].keys, _fp["default"].omitBy(_fp["default"].identity) // omit truthy values
          )(classes);
          if (!_lodash["default"].isEmpty(unusedClasses)) {
            context.report(node, "Unused classes found in ".concat(_path["default"].basename(filePath), ": ").concat(unusedClasses.join(', ')));
          }
        });
      }
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
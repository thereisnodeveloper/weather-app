"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _lodash = _interopRequireDefault(require("lodash"));
var _core = require("../core");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var _default = exports["default"] = {
  meta: {
    docs: {
      description: 'Checks that you are using the existent css/scss/less classes',
      recommended: true
    },
    schema: [{
      type: 'object',
      properties: {
        camelCase: {
          "enum": [true, 'dashes', 'only', 'dashes-only']
        }
      }
    }]
  },
  create: function create(context) {
    var camelCase = _lodash["default"].get(context, 'options[0].camelCase');

    /*
       maps variable name to property Object
       map = {
         [variableName]: {
           classesMap: { foo: 'foo', fooBar: 'foo-bar', 'foo-bar': 'foo-bar' },
           node: {...}
         }
       }
        example:
       import s from './foo.scss';
       s is variable name
        property Object has two keys
       1. classesMap: an object with propertyName as key and its className as value
       2. node: node that correspond to s (see example above)
     */
    var map = {};
    return {
      ImportDeclaration: function ImportDeclaration(node) {
        var styleImportNodeData = (0, _core.getStyleImportNodeData)(node);
        if (!styleImportNodeData) {
          return;
        }
        var importName = styleImportNodeData.importName,
          styleFilePath = styleImportNodeData.styleFilePath,
          importNode = styleImportNodeData.importNode;
        var styleFileAbsolutePath = (0, _core.getFilePath)(context, styleFilePath);
        var classesMap = {};
        var exportPropsMap = {};
        if ((0, _core.fileExists)(styleFileAbsolutePath)) {
          var ast = (0, _core.getAST)(styleFileAbsolutePath);
          var classes = ast && (0, _core.getStyleClasses)(ast);
          classesMap = classes && (0, _core.getClassesMap)(classes, camelCase);
          exportPropsMap = ast && (0, _core.getExportPropsMap)(ast);
        }

        // this will be used to check if classes are defined
        _lodash["default"].set(map, "".concat(importName, ".classesMap"), classesMap);

        // this will be used to check if :export properties are defined
        _lodash["default"].set(map, "".concat(importName, ".exportPropsMap"), exportPropsMap);

        // save node for reporting unused styles
        _lodash["default"].set(map, "".concat(importName, ".node"), importNode);
      },
      MemberExpression: function MemberExpression(node) {
        /*
           Check if property exists in css/scss file as class
         */

        var objectName = node.object.name;
        var propertyName = (0, _core.getPropertyName)(node, camelCase);
        if (!propertyName) {
          return;
        }
        var classesMap = _lodash["default"].get(map, "".concat(objectName, ".classesMap"));
        var exportPropsMap = _lodash["default"].get(map, "".concat(objectName, ".exportPropsMap"));
        if (classesMap && classesMap[propertyName] == null && exportPropsMap && exportPropsMap[propertyName] == null) {
          context.report(node.property, "Class or exported property '".concat(propertyName, "' not found"));
        }
      }
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29yZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtZXRhIiwiZG9jcyIsImRlc2NyaXB0aW9uIiwicmVjb21tZW5kZWQiLCJzY2hlbWEiLCJ0eXBlIiwicHJvcGVydGllcyIsImNhbWVsQ2FzZSIsImNyZWF0ZSIsImNvbnRleHQiLCJfIiwiZ2V0IiwibWFwIiwiSW1wb3J0RGVjbGFyYXRpb24iLCJub2RlIiwic3R5bGVJbXBvcnROb2RlRGF0YSIsImdldFN0eWxlSW1wb3J0Tm9kZURhdGEiLCJpbXBvcnROYW1lIiwic3R5bGVGaWxlUGF0aCIsImltcG9ydE5vZGUiLCJzdHlsZUZpbGVBYnNvbHV0ZVBhdGgiLCJnZXRGaWxlUGF0aCIsImNsYXNzZXNNYXAiLCJleHBvcnRQcm9wc01hcCIsImZpbGVFeGlzdHMiLCJhc3QiLCJnZXRBU1QiLCJjbGFzc2VzIiwiZ2V0U3R5bGVDbGFzc2VzIiwiZ2V0Q2xhc3Nlc01hcCIsImdldEV4cG9ydFByb3BzTWFwIiwic2V0IiwiY29uY2F0IiwiTWVtYmVyRXhwcmVzc2lvbiIsIm9iamVjdE5hbWUiLCJvYmplY3QiLCJuYW1lIiwicHJvcGVydHlOYW1lIiwiZ2V0UHJvcGVydHlOYW1lIiwicmVwb3J0IiwicHJvcGVydHkiXSwic291cmNlcyI6WyIuLi8uLi9saWIvcnVsZXMvbm8tdW5kZWYtY2xhc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gIGdldFN0eWxlSW1wb3J0Tm9kZURhdGEsXG4gIGdldEFTVCxcbiAgZmlsZUV4aXN0cyxcbiAgZ2V0U3R5bGVDbGFzc2VzLFxuICBnZXRQcm9wZXJ0eU5hbWUsXG4gIGdldENsYXNzZXNNYXAsXG4gIGdldEV4cG9ydFByb3BzTWFwLFxuICBnZXRGaWxlUGF0aCxcbn0gZnJvbSAnLi4vY29yZSc7XG5cbmltcG9ydCB0eXBlIHsgSnNOb2RlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1ldGE6IHtcbiAgICBkb2NzOiB7XG4gICAgICBkZXNjcmlwdGlvbjogJ0NoZWNrcyB0aGF0IHlvdSBhcmUgdXNpbmcgdGhlIGV4aXN0ZW50IGNzcy9zY3NzL2xlc3MgY2xhc3NlcycsXG4gICAgICByZWNvbW1lbmRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHNjaGVtYTogW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGNhbWVsQ2FzZTogeyBlbnVtOiBbdHJ1ZSwgJ2Rhc2hlcycsICdvbmx5JywgJ2Rhc2hlcy1vbmx5J10gfVxuICAgICAgICB9LFxuICAgICAgfVxuICAgIF0sXG4gIH0sXG4gIGNyZWF0ZSAoY29udGV4dDogT2JqZWN0KSB7XG4gICAgY29uc3QgY2FtZWxDYXNlID0gXy5nZXQoY29udGV4dCwgJ29wdGlvbnNbMF0uY2FtZWxDYXNlJyk7XG5cbiAgICAvKlxuICAgICAgIG1hcHMgdmFyaWFibGUgbmFtZSB0byBwcm9wZXJ0eSBPYmplY3RcbiAgICAgICBtYXAgPSB7XG4gICAgICAgICBbdmFyaWFibGVOYW1lXToge1xuICAgICAgICAgICBjbGFzc2VzTWFwOiB7IGZvbzogJ2ZvbycsIGZvb0JhcjogJ2Zvby1iYXInLCAnZm9vLWJhcic6ICdmb28tYmFyJyB9LFxuICAgICAgICAgICBub2RlOiB7Li4ufVxuICAgICAgICAgfVxuICAgICAgIH1cblxuICAgICAgIGV4YW1wbGU6XG4gICAgICAgaW1wb3J0IHMgZnJvbSAnLi9mb28uc2Nzcyc7XG4gICAgICAgcyBpcyB2YXJpYWJsZSBuYW1lXG5cbiAgICAgICBwcm9wZXJ0eSBPYmplY3QgaGFzIHR3byBrZXlzXG4gICAgICAgMS4gY2xhc3Nlc01hcDogYW4gb2JqZWN0IHdpdGggcHJvcGVydHlOYW1lIGFzIGtleSBhbmQgaXRzIGNsYXNzTmFtZSBhcyB2YWx1ZVxuICAgICAgIDIuIG5vZGU6IG5vZGUgdGhhdCBjb3JyZXNwb25kIHRvIHMgKHNlZSBleGFtcGxlIGFib3ZlKVxuICAgICAqL1xuICAgIGNvbnN0IG1hcCA9IHt9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIEltcG9ydERlY2xhcmF0aW9uIChub2RlOiBKc05vZGUpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVJbXBvcnROb2RlRGF0YSA9IGdldFN0eWxlSW1wb3J0Tm9kZURhdGEobm9kZSk7XG5cbiAgICAgICAgaWYgKCFzdHlsZUltcG9ydE5vZGVEYXRhKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGltcG9ydE5hbWUsXG4gICAgICAgICAgc3R5bGVGaWxlUGF0aCxcbiAgICAgICAgICBpbXBvcnROb2RlLFxuICAgICAgICB9ID0gc3R5bGVJbXBvcnROb2RlRGF0YTtcblxuICAgICAgICBjb25zdCBzdHlsZUZpbGVBYnNvbHV0ZVBhdGggPSBnZXRGaWxlUGF0aChjb250ZXh0LCBzdHlsZUZpbGVQYXRoKTtcbiAgICAgICAgbGV0IGNsYXNzZXNNYXAgPSB7fTtcbiAgICAgICAgbGV0IGV4cG9ydFByb3BzTWFwID0ge307XG5cbiAgICAgICAgaWYgKGZpbGVFeGlzdHMoc3R5bGVGaWxlQWJzb2x1dGVQYXRoKSkge1xuICAgICAgICAgIGNvbnN0IGFzdCA9IGdldEFTVChzdHlsZUZpbGVBYnNvbHV0ZVBhdGgpO1xuICAgICAgICAgIGNvbnN0IGNsYXNzZXMgPSBhc3QgJiYgZ2V0U3R5bGVDbGFzc2VzKGFzdCk7XG5cbiAgICAgICAgICBjbGFzc2VzTWFwID0gY2xhc3NlcyAmJiBnZXRDbGFzc2VzTWFwKGNsYXNzZXMsIGNhbWVsQ2FzZSk7XG4gICAgICAgICAgZXhwb3J0UHJvcHNNYXAgPSBhc3QgJiYgZ2V0RXhwb3J0UHJvcHNNYXAoYXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgd2lsbCBiZSB1c2VkIHRvIGNoZWNrIGlmIGNsYXNzZXMgYXJlIGRlZmluZWRcbiAgICAgICAgXy5zZXQobWFwLCBgJHtpbXBvcnROYW1lfS5jbGFzc2VzTWFwYCwgY2xhc3Nlc01hcCk7XG5cbiAgICAgICAgLy8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2hlY2sgaWYgOmV4cG9ydCBwcm9wZXJ0aWVzIGFyZSBkZWZpbmVkXG4gICAgICAgIF8uc2V0KG1hcCwgYCR7aW1wb3J0TmFtZX0uZXhwb3J0UHJvcHNNYXBgLCBleHBvcnRQcm9wc01hcCk7XG5cbiAgICAgICAgLy8gc2F2ZSBub2RlIGZvciByZXBvcnRpbmcgdW51c2VkIHN0eWxlc1xuICAgICAgICBfLnNldChtYXAsIGAke2ltcG9ydE5hbWV9Lm5vZGVgLCBpbXBvcnROb2RlKTtcbiAgICAgIH0sXG4gICAgICBNZW1iZXJFeHByZXNzaW9uOiAobm9kZTogSnNOb2RlKSA9PiB7XG4gICAgICAgIC8qXG4gICAgICAgICAgIENoZWNrIGlmIHByb3BlcnR5IGV4aXN0cyBpbiBjc3Mvc2NzcyBmaWxlIGFzIGNsYXNzXG4gICAgICAgICAqL1xuXG4gICAgICAgIGNvbnN0IG9iamVjdE5hbWUgPSBub2RlLm9iamVjdC5uYW1lO1xuXG4gICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IGdldFByb3BlcnR5TmFtZShub2RlLCBjYW1lbENhc2UpO1xuXG4gICAgICAgIGlmICghcHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2xhc3Nlc01hcCA9IF8uZ2V0KG1hcCwgYCR7b2JqZWN0TmFtZX0uY2xhc3Nlc01hcGApO1xuICAgICAgICBjb25zdCBleHBvcnRQcm9wc01hcCA9IF8uZ2V0KG1hcCwgYCR7b2JqZWN0TmFtZX0uZXhwb3J0UHJvcHNNYXBgKTtcblxuICAgICAgICBpZiAoY2xhc3Nlc01hcCAmJiBjbGFzc2VzTWFwW3Byb3BlcnR5TmFtZV0gPT0gbnVsbCAmJlxuICAgICAgICAgICAgZXhwb3J0UHJvcHNNYXAgJiYgZXhwb3J0UHJvcHNNYXBbcHJvcGVydHlOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnQobm9kZS5wcm9wZXJ0eSwgYENsYXNzIG9yIGV4cG9ydGVkIHByb3BlcnR5ICcke3Byb3BlcnR5TmFtZX0nIG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBU2lCLFNBQUFELHVCQUFBRyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFBQSxJQUFBRSxRQUFBLEdBQUFDLE9BQUEsY0FJRjtFQUNiQyxJQUFJLEVBQUU7SUFDSkMsSUFBSSxFQUFFO01BQ0pDLFdBQVcsRUFBRSw4REFBOEQ7TUFDM0VDLFdBQVcsRUFBRTtJQUNmLENBQUM7SUFDREMsTUFBTSxFQUFFLENBQ047TUFDRUMsSUFBSSxFQUFFLFFBQVE7TUFDZEMsVUFBVSxFQUFFO1FBQ1ZDLFNBQVMsRUFBRTtVQUFFLFFBQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxhQUFhO1FBQUU7TUFDN0Q7SUFDRixDQUFDO0VBRUwsQ0FBQztFQUNEQyxNQUFNLFdBQUFBLE9BQUVDLE9BQWUsRUFBRTtJQUN2QixJQUFNRixTQUFTLEdBQUdHLGtCQUFDLENBQUNDLEdBQUcsQ0FBQ0YsT0FBTyxFQUFFLHNCQUFzQixDQUFDOztJQUV4RDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFHSSxJQUFNRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRWQsT0FBTztNQUNMQyxpQkFBaUIsV0FBQUEsa0JBQUVDLElBQVksRUFBRTtRQUMvQixJQUFNQyxtQkFBbUIsR0FBRyxJQUFBQyw0QkFBc0IsRUFBQ0YsSUFBSSxDQUFDO1FBRXhELElBQUksQ0FBQ0MsbUJBQW1CLEVBQUU7VUFDeEI7UUFDRjtRQUVBLElBQ0VFLFVBQVUsR0FHUkYsbUJBQW1CLENBSHJCRSxVQUFVO1VBQ1ZDLGFBQWEsR0FFWEgsbUJBQW1CLENBRnJCRyxhQUFhO1VBQ2JDLFVBQVUsR0FDUkosbUJBQW1CLENBRHJCSSxVQUFVO1FBR1osSUFBTUMscUJBQXFCLEdBQUcsSUFBQUMsaUJBQVcsRUFBQ1osT0FBTyxFQUFFUyxhQUFhLENBQUM7UUFDakUsSUFBSUksVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBRXZCLElBQUksSUFBQUMsZ0JBQVUsRUFBQ0oscUJBQXFCLENBQUMsRUFBRTtVQUNyQyxJQUFNSyxHQUFHLEdBQUcsSUFBQUMsWUFBTSxFQUFDTixxQkFBcUIsQ0FBQztVQUN6QyxJQUFNTyxPQUFPLEdBQUdGLEdBQUcsSUFBSSxJQUFBRyxxQkFBZSxFQUFDSCxHQUFHLENBQUM7VUFFM0NILFVBQVUsR0FBR0ssT0FBTyxJQUFJLElBQUFFLG1CQUFhLEVBQUNGLE9BQU8sRUFBRXBCLFNBQVMsQ0FBQztVQUN6RGdCLGNBQWMsR0FBR0UsR0FBRyxJQUFJLElBQUFLLHVCQUFpQixFQUFDTCxHQUFHLENBQUM7UUFDaEQ7O1FBRUE7UUFDQWYsa0JBQUMsQ0FBQ3FCLEdBQUcsQ0FBQ25CLEdBQUcsS0FBQW9CLE1BQUEsQ0FBS2YsVUFBVSxrQkFBZUssVUFBVSxDQUFDOztRQUVsRDtRQUNBWixrQkFBQyxDQUFDcUIsR0FBRyxDQUFDbkIsR0FBRyxLQUFBb0IsTUFBQSxDQUFLZixVQUFVLHNCQUFtQk0sY0FBYyxDQUFDOztRQUUxRDtRQUNBYixrQkFBQyxDQUFDcUIsR0FBRyxDQUFDbkIsR0FBRyxLQUFBb0IsTUFBQSxDQUFLZixVQUFVLFlBQVNFLFVBQVUsQ0FBQztNQUM5QyxDQUFDO01BQ0RjLGdCQUFnQixFQUFFLFNBQUFBLGlCQUFDbkIsSUFBWSxFQUFLO1FBQ2xDO0FBQ1I7QUFDQTs7UUFFUSxJQUFNb0IsVUFBVSxHQUFHcEIsSUFBSSxDQUFDcUIsTUFBTSxDQUFDQyxJQUFJO1FBRW5DLElBQU1DLFlBQVksR0FBRyxJQUFBQyxxQkFBZSxFQUFDeEIsSUFBSSxFQUFFUCxTQUFTLENBQUM7UUFFckQsSUFBSSxDQUFDOEIsWUFBWSxFQUFFO1VBQ2pCO1FBQ0Y7UUFFQSxJQUFNZixVQUFVLEdBQUdaLGtCQUFDLENBQUNDLEdBQUcsQ0FBQ0MsR0FBRyxLQUFBb0IsTUFBQSxDQUFLRSxVQUFVLGdCQUFhLENBQUM7UUFDekQsSUFBTVgsY0FBYyxHQUFHYixrQkFBQyxDQUFDQyxHQUFHLENBQUNDLEdBQUcsS0FBQW9CLE1BQUEsQ0FBS0UsVUFBVSxvQkFBaUIsQ0FBQztRQUVqRSxJQUFJWixVQUFVLElBQUlBLFVBQVUsQ0FBQ2UsWUFBWSxDQUFDLElBQUksSUFBSSxJQUM5Q2QsY0FBYyxJQUFJQSxjQUFjLENBQUNjLFlBQVksQ0FBQyxJQUFJLElBQUksRUFBRTtVQUMxRDVCLE9BQU8sQ0FBQzhCLE1BQU0sQ0FBQ3pCLElBQUksQ0FBQzBCLFFBQVEsaUNBQUFSLE1BQUEsQ0FBaUNLLFlBQVksZ0JBQWEsQ0FBQztRQUN6RjtNQUNGO0lBQ0YsQ0FBQztFQUNIO0FBQ0YsQ0FBQyJ9